package controller;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;

import javax.print.attribute.standard.DateTimeAtCompleted;
import javax.swing.JOptionPane;

import org.graphstream.algorithm.Algorithm;
import org.graphstream.graph.Graph;
import org.graphstream.graph.Node;

import Utilidades.Nodexy;
import algoritmos.AlgoritmoController;
import algoritmos.Colorir;
import dao.GrafoDao;
import model.Configuracoes;
import model.Eletrodo;
import model.MatrizAdjacencia;

public class GrafoController {
	private GrafoDao dao;
	private PrintWriter writer;
	public GrafoController(){
	}
	public void iniciarFonteDeDados(Configuracoes config) {
		 dao = new GrafoDao(config);
		try {
			if(config.isExportData()) {
				Date d = new Date();
				Calendar cal = new GregorianCalendar();
				cal.setTime(d);
				cal.getTime();
			writer = new PrintWriter(config.getFileName(), "UTF-8");
			}
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	public void getGrafoZerado(Graph graph, Configuracoes config) { // retorna um grafo zerado
		graph.clear();
	    graph.addAttribute("ui.stylesheet", "graph { fill-mode: image-scaled; fill-image: url('data/images/escalpo2.png'); } node { text-style: bold; text-alignment: above; text-size:20px; fill-color: #008080; size: 30px; } node.zero {  fill-color: #ecf0f1; size: 30px;} node.um{fill-color: #2c0; size: 40px;} node.dois{fill-color: #4a0; size: 50px;} node.tres{fill-color: #680;size: 60px;} node.quatro{fill-color: #860;size:70px;} node.cinco{fill-color: #a40;size: 80px;} node.seis{fill-color: #c20;size: 90px;} node.sete{fill-color: #f00;size: 100px;} edge { shape: angle; arrow-shape: none; size: 3px; fill-color: #444; }");
		
	    
	    for(int i = 0; i<config.getNodesNumber();i++) {
		    graph.addNode("Node"+i);
	    }
		
		
			try {
				//JOptionPane.showMessageDialog(null, "Entrou aqui no else");
				 Nodexy nxy = new Nodexy();
			     FileReader arq = new FileReader("layouts.txt");
			     BufferedReader lerArq = new BufferedReader(arq);
			     String linha = "";
			     int contador = 0;
			     while(contador !=config.getTipoGrafo()+1) {
			    	 linha = lerArq.readLine();
			    	 contador++;
			     }
			     //JOptionPane.showMessageDialog(null, "achou a linha "+linha);
			     String[] dados = linha.split(";");
			     for(int i = 0; i<config.getNodesNumber();i++) {
			    	 double[] xy = nxy.getaMap().get(dados[i+1]);
			     	Node node = graph.getNode("Node"+i);
					node.addAttribute("ui.label", dados[i+1]);
					node.setAttribute("xy", xy[0], xy[1]);	
			     }
   
			} catch (Exception e) {
		        JOptionPane.showMessageDialog(null, "Error: Can not open file:\n"+e.getMessage());
		    }
			
		
	}
	public List<String> getTiposGrafo() {
		List<String> retorno = new ArrayList<String>();
		//retorno.add("Electrode positions");
		//retorno.add("Circular");
		try {
		     FileReader arq = new FileReader("layouts.txt");
		     BufferedReader lerArq = new BufferedReader(arq);
		     String linha = lerArq.readLine();
		     while (linha != null) {
		        String[] arrayLinha = linha.split(";");
		       retorno.add(arrayLinha[0]);
		        linha = lerArq.readLine(); // lê da segunda até a última linha
		      }
		      arq.close();
		    
		    } catch (Exception e) {
		        JOptionPane.showMessageDialog(null, "Error: Can not open file:\n"+e.getMessage());
		    }
		return retorno;
	}
	public void calcularMetricas(Graph graph) {
		
	}
	public void proximoGrafo(Graph graph, Configuracoes config) throws IndexOutOfBoundsException{// cria Grafo a partir de matriz de adjacencia
		getGrafoZerado(graph, config);//deixa o grafo zerado
		MatrizAdjacencia matriz = dao.geMatrizAdjacencia();//pega a proxima matriz de adjacencia
		for(int linha = 0; linha<graph.getNodeCount();linha++) {
			for(int coluna = 0; coluna <graph.getNodeCount();coluna++) {
				if(coluna > linha) {
					if(matriz.getDados()[linha][coluna]==1) {
					graph.addEdge(graph.getNode(linha).toString()+graph.getNode(coluna).toString(), (Node)graph.getNode(linha), (Node)graph.getNode(coluna));
					}
				}
			}
		}
		
	}
	public void atualizarGrafoTempoExecucao(Graph graph, Configuracoes config) { // cria trhead para executar em paralelo
		new Thread() {
			@Override
			public void run() {
				try {
					proximoGrafo(graph, config);// atualiza grafo
					
					//colorindo o grafo
					Colorir alg= new Colorir(config);
					alg.init(graph);
					alg.compute();
					if(config.isExportData())
					writer.println(alg.getDados());
					// espera para atualizar mais uma vez
					sleep(config.getTempoAtualizacao());
					
					//se alguém apertar em parar
					if(!config.isPararGrafo()) {
					atualizarGrafoTempoExecucao(graph, config); // repete o metodo
					}else {
						if(config.isExportData()) {
						 writer.close();
						}
						getGrafoZerado(graph, config);	
					}
				} catch (InterruptedException e) {
					System.out.println("Termino de execução2");
					 writer.close();
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IndexOutOfBoundsException e) {
					// TODO: handle exception
					 writer.close();
					System.out.println("Termino de execução");
				}
			}
		}.start();

	}	
}
